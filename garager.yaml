esphome:
  name: garager

#esp32:
#  board: esp32-s2-saola-1
#  framework:
#    type: esp-idf

esp32:
  board: lolin_s2_mini
  variant: esp32s2
  framework:
    type: esp-idf
    platform_version: 4.4.0


# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Garager Fallback Hotspot"
    password: !secret fallback_password
    ap_timeout: 10min

mdns:
  disabled: false

time:
  - platform: homeassistant
    id: ha_time


#captive_portal:

i2c:
  sda: GPIO33
  scl: GPIO35
  scan: true
  id: bus_a
  frequency: 100kHz

sensor:
  - platform: uptime
    name: Uptime Sensor

  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s
    id: s_wifi_signal

  - platform: vl53l0x
    name: "Distance door"
    id: s_distance_door
    address: 0x41
    update_interval: 1500ms
    long_range: true
    enable_pin: GPIO39

  - platform: vl53l0x
    name: "Distance car"
    id: s_distance_car
    address: 0x42
    update_interval: 1500ms
    long_range: true
    enable_pin: GPIO37


light:
  - platform: status_led
    name: "Switch state"
    pin: GPIO15

button:
  - platform: restart
    name: "Restart"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
    ssid:
      name: Connected SSID
    bssid:
      name: Connected BSSID
    mac_address:
      name: Mac Wifi Address
    scan_results:
      name: Latest Scan Results
  - platform: version
    name: "ESPHome Version"



binary_sensor:
  - platform: template
    name: "Garage occupied"
    # Set the distance threshold for determining occupancy
    # For example, if the distance threshold is set to 2 meters,
    # the sensor will consider the garage to be occupied if the distance
    # measured by the time-of-flight sensor is less than 2 meters
    lambda: |-
      if (id(s_distance_car).state < 2.0) {
        return true;
      }
      return false;

  - platform: template
    name: "Garage open"
    # Set the distance threshold for determining occupancy
    # For example, if the distance threshold is set to 2 meters,
    # the sensor will consider the garage to be occupied if the distance
    # measured by the time-of-flight sensor is less than 2 meters
    lambda: |-
      if (id(s_distance_door).state < 2.0) {
        return true;
      }
      return false;


#font:
#  - file: "gfonts://Roboto"
#    id: roboto10
#    size: 10
#
#  - file: "gfonts://Roboto"
#    id: roboto14
#    size: 14


#display:
#  - platform: ssd1306_i2c
#    model: "SSD1306 64x48"
#    reset_pin: GPIO9
#    address: 0x3C
#    update_interval: 500ms
#    lambda: |-
#      it.strftime(0, 0, id(roboto10), "%d.%m.%Y", id(ha_time).now());
#      it.strftime(0, 12, id(roboto10), "%H.%M.%S", id(ha_time).now());
#      it.printf(it.get_width(), 23, id(roboto14), TextAlign::RIGHT, "%.0fdb", id(s_wifi_signal).state);

