esphome:
  name: garager

#esp32:
#  board: esp32-s2-saola-1
#  framework:
#    type: esp-idf

esp32:
  board: lolin_s2_mini
  variant: esp32s2
#  framework:
#    type: esp-idf
#    platform_version: 5.2.0


# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Garager Fallback Hotspot"
    password: !secret fallback_password
    ap_timeout: 10min

mdns:
  disabled: false

#time:
#  - platform: homeassistant
#    id: ha_time


#captive_portal:

i2c:
  sda: GPIO33
  scl: GPIO35
  scan: true
  id: bus_a
#  frequency: 100kHz

sensor:
  - platform: uptime
    name: Uptime Sensor

  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s
    id: s_wifi_signal

  - platform: vl53l0x
    name: "Distance door"
    id: s_distance_door
    address: 0x41
    update_interval: 500ms
    long_range: true
    enable_pin: GPIO39
    timeout: 200us
    internal: true
    filters:
      - filter_out: 0.0
      # - filter_out: nan
      - lambda: if (isnan(x)) {  return 5.0; } return x;    
      - quantile:
          window_size: 10  
      #- min:

  - platform: vl53l0x
    name: "Distance car"
    id: s_distance_car
    address: 0x42
    update_interval: 500ms
    long_range: true
    enable_pin: GPIO37
    timeout: 200us
    internal: true
    filters:
      - filter_out: 0.0
      # - filter_out: nan
      - lambda: if (isnan(x)) {  return 5.0; } return x;      
      - quantile:
          window_size: 10
      #- min:



light:
  - platform: status_led
    name: "Status light"
    id: status_light
    pin: GPIO15

button:
  - platform: restart
    name: "Restart"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
    ssid:
      name: Connected SSID
    bssid:
      name: Connected BSSID
    mac_address:
      name: Mac Wifi Address
    scan_results:
      name: Latest Scan Results
  - platform: version
    name: "ESPHome Version"



binary_sensor:
  - platform: template
    name: "Garage occupied"
    # Set the distance threshold for determining occupancy
    # For example, if the distance threshold is set to 2 meters,
    # the sensor will consider the garage to be occupied if the distance
    # measured by the time-of-flight sensor is less than 2 meters
    lambda: |-
      if (id(s_distance_car).state < 2.0) {
        id(status_light).turn_on();
        return true;
      }
      id(status_light).turn_off();
      return false;

  - platform: template
    name: "Garage open"
    id: garage_open
    # Set the distance threshold for determining occupancy
    # For example, if the distance threshold is set to 2 meters,
    # the sensor will consider the garage to be occupied if the distance
    # measured by the time-of-flight sensor is less than 2 meters
    lambda: |-
      if (id(s_distance_door).state < 0.5) {
        return true;
      }
      return false;

switch:
  - platform: gpio
    pin: GPIO3
    id: openrelay
    name: "Garage Remote"
    icon: "mdi:gate"
    on_turn_on:
    - delay: 1000ms
    - switch.turn_off: openrelay
    internal: true

cover:
  - platform: template
    #id: garage_door:
    device_class: garage
    name: "Right garage"
    lambda: |-
       if (id(garage_open).state) {
         return COVER_OPEN;
       } else {
         return COVER_CLOSED;
       }
    open_action:
     - switch.turn_on: openrelay
    close_action:
     - switch.turn_on: openrelay
    stop_action:
     - switch.turn_on: openrelay
